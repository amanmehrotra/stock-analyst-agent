import json
from datetime import datetime

import streamlit as st

from langgraph_flow.graph_builder import run_graph

def sentiment_color(sentiment):
    sentiment_display = {
        "positive": ("‚úÖ Positive", "‚úÖ ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï", "green"),
        "negative": ("üî¥ Negative","üî¥ ‡§®‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï", "red"),
        "neutral": ("‚ö™ Neutral","‚ö™ ‡§§‡§ü‡§∏‡•ç‡§•", "gray"),
    }
    return sentiment_display[sentiment]


def start():

# Page config
    st.set_page_config(page_title="Stock Analyst - Intraday & Short-term", layout="wide")
### remove deploy button

    # st.markdown("""
    #     <style>
    #         /* Hide top toolbar including 'Deploy', 'Settings', 'Feedback' */
    #         [data-testid="stToolbar"] {
    #             display: none;
    #         }
    #
    #         /* Optionally hide the footer (Streamlit branding) */
    #         footer {
    #             visibility: hidden;
    #         }
    #     </style>
    # """, unsafe_allow_html=True)
    # Header
    st.title("üìà AM0002- Stock Analyst Agent")
    st.markdown("Intraday and Short-Term Trading Advisor")

    # Sidebar: Stock Selection
    stock_name = st.sidebar.selectbox(
        "Select a Stock",
        ["Indian Bank", "Adani Power", "PNB","IIFL","JSW Steel","Adani Green","IndusInd Bank","POWERGRID",
         "NTPC", "Ambuja Cement", "ATGL", "AWL Agri Business", "Adani Ports",
         "PAYTM", "Adani Enterprises", "IDEA", "SAIL", "BHEL", "BANK OF BARODA",
         "RVNL","ONGC", "SBI"]
    )

    trading_type = st.sidebar.selectbox(
        "Select Trading Type",
        ["Intraday", "Short-term"],
        index=0
    )

    language = st.sidebar.radio("Choose Language", ["hindi","english"], horizontal=True)

    if "result_json" not in st.session_state:
        st.session_state.result_json = None
    if "result" not in st.session_state:
        st.session_state.result = None
    if "result_json_hindi" not in st.session_state:
        st.session_state.result_json_hindi = None
    # Fetch Button
    analyze_button = st.sidebar.button("Analyze")
    if analyze_button:
        st.session_state.result_json = None

        with st.spinner("Fetching Stock news, chart indicators and analysis in progress..."):

            result = run_graph(stock_name, trading_type)
            result_json = result.get('analysis', None)
            result_json_hindi = result.get('analysis_hindi',None)
            if result_json is None or result_json_hindi is None:
                st.session_state.result_json = None
                st.session_state.result_json_hindi = None
                if language == "english":
                    st.info('Agent is busy at the moment. Please try again.')
                elif language == "hindi":
                    st.info('‡§è‡§ú‡•á‡§Ç‡§ü ‡§á‡§∏ ‡§∏‡§Æ‡§Ø ‡§µ‡•ç‡§Ø‡§∏‡•ç‡§§ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§')

            st.session_state.result_json = result_json
            st.session_state.result = result
            st.session_state.result_json_hindi = result_json_hindi
    elif analyze_button is False and st.session_state.result_json is None:
        if language == "hindi":
            st.info("‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§∏‡•ç‡§ü‡•â‡§ï ‡§ö‡•Å‡§®‡•á‡§Ç ‡§î‡§∞ 'Analyze' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§")
        else:
            st.info("Please select a stock and click on 'Analyze'.")



    if st.session_state.result_json and st.session_state.result_json_hindi:
        result_json = st.session_state.result_json
        result = st.session_state.result
        result_json_hindi = st.session_state.result_json_hindi
        st.subheader(f"Analysis for: {result['stock_name']}")
        tab1, tab2, tab3 = st.tabs(["üì∞ News", "üìä Chart Indicators", "üìú Final Recommendation"])
        with tab2:
            st.markdown("### Chart Indicators")
            indicator_explanation = result_json.get('indicator_explanation_english','')
            indicators_org = result['indicators']
            col1, col2 = st.columns([2, 1])
            with col1:
                if result['chart_buffer']:
                    st.image(result['chart_buffer'], caption="üìä Stock Chart")
            with col2:
                col3, col4 = st.columns(2)
                with col3:
                    st.metric("Close Price", f"‚Çπ{indicators_org['close_price']}")
                    st.metric("SMA 20", f"‚Çπ{indicators_org['SMA_20']}")
                    st.metric("SMA 50", f"‚Çπ{indicators_org['SMA_50']}")
                    st.metric("RSI", f"{indicators_org['RSI']}")
                with col4:
                    st.metric("MACD", f"{indicators_org['MACD']}")
                    st.metric("MACD Signal", f"{indicators_org['MACD_signal']}")
                    st.metric("Bollinger High", f"‚Çπ{indicators_org['bollinger_high_band']}")
                    st.metric("Bollinger Low", f"‚Çπ{indicators_org['bollinger_low_band']}")
            st.markdown("### Explanation")
            if language == "hindi":
                st.success(f"{result_json_hindi.get('indicator_explanation', '')}")
            else:
                st.success(f"{indicator_explanation}")
        with tab1:
            st.markdown("### Latest News")
            n = result_json_hindi['news']
            m = {}
            for item in n:
                m[item['id']] = item
            news = result["news"]

            if not news:
                if language == 'hindi':
                    st.warning("‡§Ö‡§≠‡•Ä ‡§ï‡•ã‡§à ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")
                else:
                    st.warning("No news currently available!")
            else:
                for i in news:
                    source = i['source'].split(':')[0]
                    item = m[i['id']]
                    if language == "hindi":
                        pass
                        label_en, label_hi, color = sentiment_color(i['sentiment'])
                        with st.expander(f"üìå **{item.get('title','')} (üì∞ {source})**"):
                            st.write(f"üìÑ {item.get('summary','')}")
                            st.markdown(f"üß† **‡§≠‡§æ‡§µ:** <span style='color:{color}'>{label_hi}</span>",
                                        unsafe_allow_html=True)
                            st.markdown(f"üîó [‡§™‡•Ç‡§∞‡§æ ‡§≤‡•á‡§ñ ‡§™‡§¢‡§º‡•á‡§Ç]({i['link']})")
                            dt = datetime.strptime(i['publishedAt'], "%Y-%m-%d %H:%M:%S")
                            st.markdown(f"üïí ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂‡§ø‡§§: {dt.strftime("%b %d, %Y, %I:%M %p")}")

                    else:
                        label_en, label_hi, color = sentiment_color(i['sentiment'])
                        with st.expander(f"üìå **{i['title']} (üì∞ {source})**"):
                            st.write(f"üìÑ {i['summary']}")
                            st.markdown(f"üß† **Sentiment:** <span style='color:{color}'>{label_en}</span>",
                                        unsafe_allow_html=True)
                            st.markdown(f"üîó [Read article]({i['link']})")
                            dt = datetime.strptime(i['publishedAt'], "%Y-%m-%d %H:%M:%S")
                            st.markdown(f"üïí Published on {dt.strftime("%b %d, %Y, %I:%M %p")}")
        with tab3:
            # Final Suggestion
            st.markdown("### Recommendation (AI-based)")
            if language == "hindi":
                st.success(f"{result_json_hindi.get('final_recommendation','')}")
            else:
                st.success(f"{result_json.get('final_recommendation_english','')}")